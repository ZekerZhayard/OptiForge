buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2" }
        mavenCentral()
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:${forge_gradle_version}"
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "com.matthewprenger.cursegradle"

version = "${mod_version}${-> getVersionSuffix()}"
group = "io.github.zekerzhayard" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "OptiForge-MC${minecraft_version}"

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "official", version: "${minecraft_version}"
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file("run")

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property "forge.logging.markers", "CLASSDUMP,SCAN,REGISTRIES,REGISTRYDUMP"

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property "forge.logging.console.level", "all"
            property "forge.logging.classtransformer.level", "TRACE"

            property "modlauncher.logging.marker.classdump", "ACCEPT"

            property "optiforge.dumpclass", "true"

            mods {
                optiforge {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    runtimeOnly fileTree(dir: "libs", include: "*.jar")
}

// Example for how to get properties into the manifest for reading at runtime.
def attrs = [
        "Automatic-Module-Name": "${group}.optiforge",
        "Specification-Title": "OptiForge",
        "Specification-Vendor": "ZekerZhayard",
        "Specification-Version": "1", // We are version 1 of ourselves
        "Implementation-Title": project.name,
        "Implementation-Version": "${version}",
        "Implementation-Vendor" :"ZekerZhayard",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
]

jar {
    manifest {
        attributes(attrs)
    }
}

task sourcesJar(type: Jar) {
    manifest {
        attributes(attrs)
    }
    from sourceSets.main.allSource
    archiveFileName = "${archivesBaseName}-${archiveVersion.get()}-sources.${archiveExtension.get()}"
}

artifacts {
    archives sourcesJar
}

processResources {
    def pros = [
            "forge_version": "${forge_version}",
            "minecraft_version": "${minecraft_version}",
            "optifine_version": "${optifine_version}",
            "version": "${version}"
    ]
    inputs.properties pros
    from sourceSets.main.resources.srcDirs, {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        include "requiredmods.properties", "META-INF/mods.toml"
        expand pros
    }
    from sourceSets.main.resources.srcDirs, {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        exclude "requiredmods.properties", "META-INF/mods.toml"
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}

compileJava {
    options.compilerArgs << "-Xlint:deprecation"
}

import java.nio.file.Files

def buildProperties = project.rootDir.toPath().resolve "build.properties"
def apiKey = null
if (Files.exists(buildProperties)) { // for local build
    def properties = new Properties()
    properties.load Files.newInputStream(buildProperties)
    apiKey = properties.get "apiKey"
} else { // for CI build
    apiKey = System.getenv("API_KEY")
}

if (apiKey != null) {
    curseforge {
        curseforge.apiKey = apiKey
        project {
            id = "372196"
            changelogType = "markdown"
            changelog = "Requires at least Forge-${minecraft_version}-${forge_version} and ${-> getOptiFineVersion()}. See [update.json](https://github.com/ZekerZhayard/OptiForge/blob/update/update.json)."
            releaseType = "beta"
            relations {
                optionalDependency "morecrashinfo"
            }
            mainArtifact jar, {
                displayName = "${archivesBaseName}-${version}"
            }
            addArtifact sourcesJar, {
                displayName = "${archivesBaseName}-${version}-sources"
            }
            addGameVersion "${minecraft_version}"
            addGameVersion "Forge"
        }
        options {
            detectNewerJava = true
        }
    }
}

String getOptiFineVersion() {
    String[] versions = "${optifine_version}".split("\\.")

    String preVer = versions[2].equals("0") ? "" : ("\\_pre" + versions[2])
    String minorVer = Integer.parseInt(versions[1]) - (preVer.equals("") ? 1 : 0)
    String majorVer = (char) ((int) ('A' as char) + Integer.parseInt(versions[0]) - 1)
    return "OptiFine\\_${minecraft_version}\\_HD\\_U\\_${majorVer}${minorVer}${preVer}"
}

static String getVersionSuffix() {
    if (System.getenv("TRAVIS_TAG") != null && System.getenv("TRAVIS_TAG") != "") {
        return ""
    } else if (System.getenv("TRAVIS_BUILD_NUMBER") != null) {
        return "-s." + System.getenv("TRAVIS_BUILD_NUMBER")
    }
    return "-LOCAL"
}
